name: Deploy Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest

      - name: Bump version and push tag
        id: version
        run: |
          git config --global user.email "manishabheemanpally@gmail.com"
          git config --global user.name "manishabheemanpally"

          # Fetch tags from the remote repository
          git fetch --tags

          # Get the current version tag
          current_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Current version: $current_version"

          # Calculate the new version tag
          new_version=$(echo $current_version | awk -F. -v OFS=. '{$NF++;print}')
          echo "New version: $new_version"

          # Check if the new version tag already exists in the remote repository
          if git rev-parse "refs/tags/$new_version" >/dev/null 2>&1; then
            echo "Tag $new_version already exists. Skipping tag creation."
            echo "new_version=" >> $GITHUB_ENV
          else
            git tag $new_version
            echo "new_version=$new_version" >> $GITHUB_ENV
          fi

      - name: Push new version tag
        if: env.new_version != ''
        env:
          GH_PAT: ${{ secrets.MY_SECRET }}
        run: |
          git push https://x-access-token:${{ secrets.MY_SECRET }}@github.com/manishabheemanpally/pythontask.git ${{ env.new_version }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.email "manishabheemanpally@gmail.com"
          git config --global user.name "manishabheemanpally"

      - name: Deploy to another repository
        env:
          GH_PAT: ${{ secrets.MY_SECRET }}
        run: |
          set -e  # Exit immediately if any command fails

          # Remove newlines and spaces from the GitHub token
          CLEAN_TOKEN=$(echo "${{ secrets.MY_SECRET }}" | tr -d '\n' | tr -d '\r')

          # Construct the remote URL
          REMOTE_URL="https://x-access-token:${CLEAN_TOKEN}@github.com/manishabheemanpally/deployrepo.git"
          echo "Using sanitized remote URL: $REMOTE_URL"

          # Add the target repository as a remote
          echo "Setting up target repository remote"
          git remote add target_repo "$REMOTE_URL"
          git remote -v

          # Fetch from the target repository
          echo "Fetching from target repository"
          git fetch target_repo || { echo 'Fetch failed'; exit 1; }

          # Check if the branch exists in the target repository
          if git ls-remote --heads target_repo mainbranch | grep -q "refs/heads/mainbranch"; then
            echo "Checking out existing branch mainbranch"
            git checkout mainbranch
          else
            echo "Creating new branch mainbranch"
            git checkout -b mainbranch
          fi

          # Merge changes from origin/main allowing unrelated histories
          echo "Merging changes from origin/main"
          git merge origin/main --allow-unrelated-histories --no-ff --no-edit || { echo 'Merge failed'; exit 1; }

          # Push changes to the target repository using the token for authentication
          echo "Pushing changes to target repository"
          git push "$REMOTE_URL" mainbranch --force || { echo 'Push failed'; exit 1; }
